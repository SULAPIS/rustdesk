if (is_osx) view.windowBlurbehind = #light;
stdout.println("current platform:", OS);
stdout.println("is_xfce: ", is_xfce);

// // html min-width, min-height not working on mac, below works for all

view.windowMinSize = (scaleIt(500), scaleIt(436));

// view.windowMaxSize = (scaleIt(600), scaleIt(300));
// view.move()

var app;
var menu_but;
var tmp = handler.get_connect_status();
var connect_status = tmp[0];
var service_stopped = handler.get_option("stop-service") == "Y";
var rendezvous_service_stopped = false;
var using_public_server = handler.using_public_server();
var software_update_url = "";
var key_confirmed = tmp[1];
var system_error = "";
var logined = false;
var is_url_page=false;
var page_name=[];
var page_icon=[];
var page_url=[];
var page_num=[];
var page_obj;
var last_id=0;
var menu_json;
var multi_menu_num=0;
var menu_num=0;

//abcde123..
var qingdaourl="http://114.115.156.246:9110/api/";
var qingdao_token="3e47aa0faf2b46eb8720bd2df69f99df";


var login_err=""

var url_page_num=0;

var web_page_data;

var ruser_name = "admin";
var ruser_password = "abcd1234!!";

var svg_menu = <svg #menu viewBox="0 0 512 512">
	<circle cx="256" cy="256" r="64"/>
	<circle cx="256" cy="448" r="64"/>
	<circle cx="256" cy="64" r="64"/>
</svg>;
var svg_refresh_password = <svg #refresh-password xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><path d="M2.5 2v6h6M2.66 15.57a10 10 0 1 0 .57-8.38"/></svg>;
var my_id = "";
var menu_page=0;

var cpu;
var memv;
var mema;
var diskv;
var diska;
var ip;
var mac;
var paper;
var ink;

// var menu_json=JSON.parse("{data:[{name:"我的",url:"",children:[]},{name:"投屏",url:"",children:[]},{name:"远程协助",url:"","children":[]},{name:"应用","url":"","children":[{"name":"合同管理","url":"http://baidu.com","children":[]},{"name":"项目管理","url":"项目管理","children":[{"name":"合同管理","url":"http://baidu.com","children":[]}]}]}]}');

function get_id() {
  my_id = handler.get_id();
  return my_id;
}

var my_disk = "";
function get_disk() {
  my_disk = handler.get_disk();
  return my_disk;
}

function get_info(){
    handler.get_info();
    cpu=handler.get_info_cpu();
    memv=handler.get_info_memv();
    mema=handler.get_info_mema();
    diskv=handler.get_info_diskv();
    diska=handler.get_info_diska();
    ink=handler.get_info_ink();
    paper=handler.get_info_paper();
    ip=handler.get_info_ip();
    mac=handler.get_info_mac();



}

function create_url_page(i,url){
    handler.send_event(1,i,0,0,0,url);
    
}
function visible_true_page(i){
    handler.send_event(2,i,0,0,0,"");
}

function visible_false_page(){
    handler.send_event(3,0,0,0,0,"");
}

function fullsize_page(url){
    handler.send_event(4,0,0,0,0,url);
}
function visible_true_pagee(){
    handler.send_event(5,0,0,0,0,"");
}
function visible_false_pagee(){
    handler.send_event(6,0,0,0,0,"");
}
function send_web_position1(x,y,w,h){
    handler.send_event(7,x,y,w,h,"");
}

var my_info=handler.get_info();

class ConnectStatus: Reactor.Component {
    function render() {
        return
            <div .connect-status>
                本机实时状态: 
                <span class={"connect-status-icon connect-status" + (service_stopped ? 0 : connect_status)} />
                {this.getConnectStatusStr()}
                {service_stopped ? <span .link #start-service>{translate('Start Service')}</span> : ""}
            </div>;
    }

    function getConnectStatusStr() {
        if (service_stopped) {
            return translate("Service is not running");
        } else if (connect_status == -1) {
            return translate('not_ready_status');
        } else if (connect_status == 0) {
            return translate('connecting_status');
        }
        if (!handler.using_public_server()) return translate('Ready');
        return <span>{translate("Ready")}</span>;
    }

    event click $(#start-service) () {
        handler.set_option("stop-service", "");
    }

    event click $(#setup-server) () {
        handler.open_url("https://rustdesk.com/blog/id-relay-set/");
    }
}

function createNewConnect(id, type) {
    id = id.replace(/\s/g, "");
    app.remote_id.value = formatId(id);
    if (!id) return;
    if (id == my_id) {
        msgbox("custom-error", "Error", "You cannot connect to your own computer");
        return;
    }
    handler.set_remote_id(id);
    handler.new_remote(id, type);
}

class ShareRdp: Reactor.Component {
    function render() {
        var rdp_shared_string = translate("Enable RDP session sharing");
        var cls = handler.is_share_rdp()  ? "selected" : "line-through";
        return <li class={cls}><span>{svg_checkmark}</span>{rdp_shared_string}</li>;
    }
    
    function onClick() {
        handler.set_share_rdp(!handler.is_share_rdp());
        this.update();
    }
}

var direct_server;
class DirectServer: Reactor.Component {
    function this() {
        direct_server = this;
    }

    function render() {
        var text = translate("Enable Direct IP Access");
        var enabled = handler.get_option("direct-server") == "Y";
        var cls = enabled ? "selected" : "line-through";
        return <li class={cls}><span>{svg_checkmark}</span>{text}{enabled && <EditDirectAccessPort />}</li>;
    }
    
    function onClick() {
        if (is_edit_rdp_port) {
            is_edit_rdp_port = false;
            return;
        }
        handler.set_option("direct-server", handler.get_option("direct-server") == "Y" ? "" : "Y");
        this.update();
    }
}

var myIdMenu;
var audioInputMenu;
class AudioInputs: Reactor.Component {
    function this() {
        audioInputMenu = this;
    }

    function render() {
        if (!this.show) return <li />;
        var inputs = handler.get_sound_inputs();
        if (is_win) inputs = ["System Sound"].concat(inputs);
        if (!inputs.length) return <li style="display:hidden" />;
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Audio Input')}
            <menu #audio-input key={inputs.length}>
                <li #enable-audio><span>{svg_checkmark}</span>{translate("Mute")}</li>
                <div .separator />
                {inputs.map(function(name) {
                return <li id={name}><span>{svg_checkmark}</span>{translate(name)}</li>;
                })}
            </menu>
        </li>;
    }

    function get_default() {
        if (is_win) return "System Sound";
        return "";
    }

    function get_value() {
        return handler.get_option("audio-input") || this.get_default();
    }

    function toggleMenuState() {
        var el = this.$(li#enable-audio);
        var enabled = handler.get_option(el.id) != "N";
        el.attributes.toggleClass("selected", !enabled);
        var v = this.get_value();
        for (var el in this.$$(menu#audio-input>li)) {
            if (el.id == 'enable-audio') continue;
            var selected = el.id == v;
            el.attributes.toggleClass("selected", selected);
        }
    }

    event click $(menu#audio-input>li) (_, me) {
        var v = me.id;
        if (v == 'enable-audio') {
            handler.set_option(v, handler.get_option(v) != 'N' ? 'N' : '');
        } else {
          if (v == this.get_value()) return;
          if (v == this.get_default()) v = "";
          handler.set_option("audio-input", v);
        }
        this.toggleMenuState();
    }
};

class Languages: Reactor.Component {
    function render() {
        var langs = JSON.parse(handler.get_langs());
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Language')}
            <menu #languages key={langs.length}>
                <li id="default"><span>{svg_checkmark}</span>Default</li>
                <div .separator />
                {langs.map(function(lang) {
                return <li id={lang[0]}><span>{svg_checkmark}</span>{lang[1]}</li>;
                })}
            </menu>
        </li>;
    }


    function toggleMenuState() {
        var cur = handler.get_local_option("lang") || "default";
        for (var el in this.$$(menu#languages>li)) {
            var selected = cur == el.id;
            el.attributes.toggleClass("selected", selected);
        }
    }

    event click $(menu#languages>li) (_, me) {
        var v = me.id;
        if (v == "default") v = "";
        handler.set_local_option("lang", v);
        app.update();
        this.toggleMenuState();
    }
}

var enhancementsMenu;
class Enhancements: Reactor.Component {
    function this() {
        enhancementsMenu = this;
    }

    function render() {
        var has_hwcodec = handler.has_hwcodec();
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li>{translate('Enhancements')}
            <menu #enhancements-menu>
                {has_hwcodec ? <li #enable-hwcodec><span>{svg_checkmark}</span>{translate("Hardware Codec")} (beta)</li> : ""}
                <li #enable-abr><span>{svg_checkmark}</span>{translate("Adaptive Bitrate")} (beta)</li>
            </menu>
        </li>;
    }

    function toggleMenuState() {
        for (var el in $$(menu#enhancements-menu>li)) {
            if (el.id && el.id.indexOf("enable-") == 0) {
                var enabled = handler.get_option(el.id) != "N";
                el.attributes.toggleClass("selected", enabled);
            }
        }

    }

    event click $(menu#enhancements-menu>li) (_, me) {
        var v = me.id;
        if (v.indexOf("enable-") == 0) {
            handler.set_option(v, handler.get_option(v) != 'N' ? 'N' : '');
        }
        this.toggleMenuState();
    }
}

function getUserName() {
    try {
        return JSON.parse(handler.get_local_option("user_info")).name;
    } catch(e) {}
    return '';
}

function updateTheme() {
    var root_element = self;
    if (handler.get_option("allow-darktheme") == "Y") {
        // enable dark theme
        root_element.attributes.toggleClass("darktheme", true);
    } else {
        // disable dark theme
        root_element.attributes.toggleClass("darktheme", false);
    }
}

class MyIdMenu: Reactor.Component {
    function this() {
        myIdMenu = this;
    }

    function render() {
        return <div #myid>
            {this.renderPop()}
            ID{svg_menu}
        </div>;
    }

    function renderPop() {
        var username = handler.get_local_option("access_token") ? getUserName() : '';
        return <popup>
            <menu.context #config-options>
                <li #enable-keyboard><span>{svg_checkmark}</span>{translate('Enable Keyboard/Mouse')}</li>
                <li #enable-clipboard><span>{svg_checkmark}</span>{translate('Enable Clipboard')}</li>
                <li #enable-file-transfer><span>{svg_checkmark}</span>{translate('Enable File Transfer')}</li> 
                <li #enable-remote-restart><span>{svg_checkmark}</span>{translate('Enable Remote Restart')}</li> 
                <li #enable-tunnel><span>{svg_checkmark}</span>{translate('Enable TCP Tunneling')}</li>
                <AudioInputs />
                <Enhancements />
                <li #allow-remote-config-modification><span>{svg_checkmark}</span>{translate('Enable remote configuration modification')}</li>
                <div .separator />
                <li #custom-server>{translate('ID/Relay Server')}</li>
                <li #whitelist title={translate('whitelist_tip')}>{translate('IP Whitelisting')}</li>
                <li #socks5-server>{translate('Socks5 Proxy')}</li>
                <div .separator />
                <li #stop-service class={service_stopped ? "line-through" : "selected"}><span>{svg_checkmark}</span>{translate("Enable Service")}</li>
                {handler.is_rdp_service_open() ? <ShareRdp /> : ""}
                <DirectServer />
                {false && handler.using_public_server() && <li #allow-always-relay><span>{svg_checkmark}</span>{translate('Always connected via relay')}</li>}
                {handler.has_rendezvous_service() ? <li #stop-rendezvous-service>{translate(rendezvous_service_stopped ? "Start ID/relay service" : "Stop ID/relay service")}</li> : ""}
                {handler.is_ok_change_id() ? <div .separator /> : ""}
                {username ? 
                <li #logout>{translate('Logout')} ({username})</li> :
                <li #login>{translate('Login')}</li>}
                {handler.is_ok_change_id() && key_confirmed ? <li #change-id>{translate('Change ID')}</li> : ""}
                <div .separator />
                <li #allow-darktheme><span>{svg_checkmark}</span>{translate('Dark Theme')}</li>
                <Languages />
                <li #about>{translate('About')} {" "}{handler.get_app_name()}</li>
            </menu>
        </popup>;
    }

    event click $(svg#menu) (_, me) {
        this.showSettingMenu();
    }

    function showSettingMenu() {
        audioInputMenu.update({ show: true });
        this.toggleMenuState();
        if (direct_server) direct_server.update();
        var menu = this.$(menu#config-options);
        this.$(svg#menu).popup(menu);
    }

    event click $(li#login) () {
        login();
    }

    event click $(li#logout) () {
        logout();
    }

    function toggleMenuState() {
        for (var el in $$(menu#config-options>li)) {
            if (el.id && el.id.indexOf("enable-") == 0) {
                var enabled = handler.get_option(el.id) != "N";
                el.attributes.toggleClass("selected", enabled);
                el.attributes.toggleClass("line-through", !enabled);
            }
            if (el.id && el.id.indexOf("allow-") == 0) {
                var enabled = handler.get_option(el.id) == "Y";
                el.attributes.toggleClass("selected", enabled);
                el.attributes.toggleClass("line-through", !enabled);
            }
        }
    }

    function showAbout() {
        var name = handler.get_app_name();
        msgbox("custom-nocancel-nook-hasclose", "About " + name, "<div style='line-height: 2em'> \
            <div>Version: " + handler.get_version() + " \
            <div .link .custom-event url='https://rustdesk.com/privacy'>Privacy Statement</div> \
            <div .link .custom-event url='https://rustdesk.com'>Website</div> \
            <div style='background: #2c8cff; color: white; padding: 1em; margin-top: 1em;'>Copyright &copy; 2022 Purslane Ltd.\
            <br />" + handler.get_license() + " \
            <p style='font-weight: bold'>Made with heart in this chaotic world!</p>\
            </div>\
        </div>", function(el) {
            if (el && el.attributes) {
                handler.open_url(el.attributes['url']);
            };
        }, 400);
    }

    event click $(menu#config-options>li) (_, me) {
        if (me.id && me.id.indexOf("enable-") == 0) {
            handler.set_option(me.id, handler.get_option(me.id) == "N" ? "" : "N");
        }
        if (me.id && me.id.indexOf("allow-") == 0) {
            handler.set_option(me.id, handler.get_option(me.id) == "Y" ? "" : "Y");
        }
        if (me.id == "whitelist") {
            var old_value = handler.get_option("whitelist").split(",").join("\n");
            msgbox("custom-whitelist", translate("IP Whitelisting"), "<div .form> \
            <div>" + translate("whitelist_sep") + "</div> \
            <textarea .outline-focus spellcheck=\"false\" name=\"text\" novalue=\"0.0.0.0\" style=\"overflow: scroll-indicator; width:*; height: 140px; font-size: 1.2em; padding: 0.5em;\">" + old_value + "</textarea>\
            </div> \
            ", function(res=null) {
                if (!res) return;
                var value = (res.text || "").trim();
                if (value) {
                    var values = value.split(/[\s,;\n]+/g);
                    for (var ip in values) {
                        if (!ip.match(/^\d+\.\d+\.\d+\.\d+$/)) {
                            return translate("Invalid IP") + ": " + ip;
                        }
                    }
                    value = values.join("\n");
                }
                if (value == old_value) return;
                stdout.println("whitelist updated");
                handler.set_option("whitelist", value.replace("\n", ","));
            }, 300);
        } else if (me.id == "custom-server") {
            var configOptions = handler.get_options();
            var old_relay = configOptions["relay-server"] || "";
            var old_api = configOptions["api-server"] || "";
            var old_id = configOptions["custom-rendezvous-server"] || "";
            var old_key = configOptions["key"] || "";
            msgbox("custom-server", "ID/Relay Server", "<div .form .set-password> \
            <div><span>" + translate("ID Server") + ": </span><input|text .outline-focus name='id' value='" + old_id + "' /></div> \
            <div><span>" + translate("Relay Server") + ": </span><input|text name='relay' value='" + old_relay + "' /></div> \
            <div><span>" + translate("API Server") + ": </span><input|text name='api' value='" + old_api + "' /></div> \
            <div><span>" + translate("Key") + ": </span><input|text name='key' value='" + old_key + "' /></div> \
            </div> \
            ", function(res=null) {
                if (!res) return;
                var id = (res.id || "").trim();
                var relay = (res.relay || "").trim();
                var api = (res.api || "").trim().toLowerCase();
                var key = (res.key || "").trim();
                if (id == old_id && relay == old_relay && key == old_key && api == old_api) return;
                if (id) {
                    var err = handler.test_if_valid_server(id);
                    if (err) return translate("ID Server") + ": " + err;
                }
                if (relay) {
                    var err = handler.test_if_valid_server(relay);
                    if (err) return translate("Relay Server") + ": " + err;
                }
                if (api) {
                    if (0 != api.indexOf("https://") && 0 != api.indexOf("http://")) {
                        return  translate("API Server") + ": " + translate("invalid_http");
                    }
                }
                configOptions["custom-rendezvous-server"] = id;
                configOptions["relay-server"] = relay;
                configOptions["api-server"] = api;
                configOptions["key"] = key;
                handler.set_options(configOptions);
            }, 260);
        } else if (me.id == "socks5-server") {
            var socks5 = handler.get_socks() || {};
            var old_proxy = socks5[0] || "";
            var old_username = socks5[1] || "";
            var old_password = socks5[2] || "";
            msgbox("custom-server", "Socks5 Proxy", <div .form .set-password> 
            <div><span>{translate("Hostname")}:</span><input|text .outline-focus name='proxy' value={old_proxy} /></div>
            <div><span>{translate("Username")}:</span><input|text name='username' value={old_username} /></div>
            <div><span>{translate("Password")}:</span><PasswordComponent value={old_password} /></div>
            </div>
            , function(res=null) {
                if (!res) return;
                var proxy = (res.proxy || "").trim();
                var username = (res.username || "").trim();
                var password = (res.password || "").trim();
                if (proxy == old_proxy && username == old_username && password == old_password) return;
                if (proxy) {
                    var err = handler.test_if_valid_server(proxy);
                    if (err) return translate("Server") + ": " + err;
                }
                handler.set_socks(proxy, username, password);
            }, 240);
        } else if (me.id == "stop-service") {
            handler.set_option("stop-service", service_stopped ? "" : "Y");
        } else if (me.id == "stop-rendezvous-service") {
            handler.set_option("stop-rendezvous-service",  rendezvous_service_stopped ? "" : "Y");
        } else if (me.id == "change-id") {
            msgbox("custom-id", translate("Change ID"), "<div .form .set-password> \
            <div>" + translate('id_change_tip') + " </div> \
            <div><span style='width: 100px; display:inline-block'>ID: </span><input|text .outline-focus style='width: 250px' name='id' /></div> \
            </div> \
            ", function(res=null, show_progress) {
                if (!res) return;
                show_progress();
                var id = (res.id || "").trim();
                if (!id) return;
                if (id == my_id) return;
                handler.change_id(id);
                function check_status() {
                    var status = handler.get_async_job_status();
                    if (status == " ") self.timer(0.1s, check_status);
                    else {
                        if (status) show_progress(false, translate(status));
                        else show_progress(-1);
                    }
                }
                check_status();
                return " ";
            });
        } else if (me.id == "allow-darktheme") {
            updateTheme();
        } else if (me.id == "about") {
            this.showAbout()
        }
    }
}

var is_edit_direct_access_port;
class EditDirectAccessPort: Reactor.Component {
    function render() {
        return <span style="margin-left: 12px; padding: 0 6px; display: inline-block;" .link>{svg_edit}</span>;
    }

    function onMouse(evt) {
        if (evt.type == Event.MOUSE_DOWN) {
            is_edit_direct_access_port = true;
            editDirectAccessPort();
        }
    }
}

function editDirectAccessPort() {
    var p0 = handler.get_option('direct-access-port');
    var port = p0 ? <input|text name='port' value={p0} /> :
                    <input|text name='port' novalue={21118} />;
    msgbox("custom-direct-access-port", translate('Direct IP Access Settings'), <div .form .set-password>
            <div><span style="width: 60px;">{translate('Port')}:</span>{port}</div>
        </div>, function(res=null) {
        if (!res) return;
        var p = (res.port || '').trim();
        if (p) {
            p = p.toInteger();
            if (!(p > 0)) {
                return translate("Invalid port");
            }
            p = p + '';
        }
        if (p != p0) handler.set_option('direct-access-port', p);
      });
}



class App: Reactor.Component
{
    function this() {
        app = this;
        view.windowState = View.WINDOW_MAXIMIZED;
        view.windowTopmost=true;
            

    }

    function render() {
        var is_can_screen_recording = handler.is_can_screen_recording(false);
         get_info();
        if (logined==false){
            return <div style="size:*;background: #ffff;">
                    <LoginPage/>
                    </div>;

        }else{
                    if (menu_page==0){
                        return
                        <div .main-app>
                            <TitleArea/>
                            <div .app>
                                <MenuArea/>
                                <RemotePage/>
                            </div>
                            <div #overlay style="position: absolute;size:*;background:black;opacity:0.5;display:none" />
                        </div>;
                    }
                    if (menu_page==1){
                        return
                        <div .main-app>
                            <TitleArea/>
                            <div .app >
                                <MenuArea/>
                                <WebPage/>
                            </div>
                            <div #overlay style="position: absolute;size:*;background:black;opacity:0.5;display:none" />
                        </div>;
                    }
                    if (menu_page==2){
                        return 
                            <div .main-app>
                                <TitleArea/>
                                <div .app>
                                    <MenuArea/>
                                        <div .left-pane>
                                            <div>
                                                <div .title>{translate('Your Desktop')}</div>
                                                <div .lighter-text>{translate('desk_tip')}</div>
                                                <div .your-desktop>
                                                    <MyIdMenu />
                                                    {key_confirmed ? <input type="text" readonly value={formatId(get_id())}/> : translate("Generating ...")}
                                                </div>
                                                <PasswordArea />
                                                <ConnectStatus @{this.connect_status} />
                                                <div .title-small>本机Mac地址: <br/>{mac}</div>
                                                <div .title-small>本机IP: {ip}</div>
                                                
                                                <div .title-small>CPU: {cpu}%</div>
                                    
                                                <div .title-small>{get_disk()}</div>
                                                <div .title-small>内存: {memv}G   {mema.toInteger()==0?100:memv.toInteger()/mema.toInteger()}%</div>
                                                <div .title-small>打印机纸: {paper==""?"缺纸":paper}</div>
                                                <div .title-small>打印机墨: {ink==""?"缺墨":ink}</div>
                                            </div>
                                            
                                        </div>
                                        <div .right-pane>
                                        
                                        </div>
                                   
                                </div>
                                <div #overlay style="position: absolute;size:*;background:black;opacity:0.5;display:none" />
                            </div>;
                    }
                    if(menu_page==3){
                        return 
                        <div .main-app>
                            <TitleArea/>
                            
                            <div .app >
                                <MenuArea/>
                                <div .multi-stage>
                                    <Multistage obj={menu_json[3].children} num_id={0} layer={0}/>
                                </div>

                                <BorderMargin/>
                              
                            </div> 
                             <div #overlay style="position: absolute;size:*;background:black;opacity:0.5;display:none" />
                        </div>;
                    }
                    if(menu_page==4){
                        return
                        <div .main-app>
                            <TitleArea/>
                            
                            <div .app >
                                <MenuArea/>
                                <div .left-pane>
                                    <Screenshot/>
                                </div>
                                <div .right-pane>
                                </div>

                              
                            </div> 
                             <div #overlay style="position: absolute;size:*;background:black;opacity:0.5;display:none" />
                        </div>;
                    }
        }
        

       
    }

    
}

class BorderMargin: Reactor.Component {
  


    function render(){
        return <div style="size:*;background:transparent;flow:vertical">
                    <div style="height:56px;width:*; background:#f0f0f0;flow:vertical">
                        <div style="height:44px;width:*;background:#ffff;box-shadow: 3px 2px 3px rgba(0,0,0,0.3);">
                            <MiniMenu/>
                        </div>
                    </div>
                    <div style="size:*;background:transparent;flow:horizontal">
                        <div style="height:*;width:27px; background:#ffff;"></div>
                        <div #position1 style="size:*;background:transparent;"></div>
                        <div style="height:*;width:27px; background:#ffff;"></div>
                    </div>
                    <div style="height:27px;width:*;background:transparent; flow:horizontal">
                        <div style="height:*;width:*;background:#ffff;"></div>
                        <div #position2 style="height:*;width:27px;background:rgba(255,255,255,1)"></div>
                    </div>
                    
                </div>;
    }
}

var menu_buttons;

class LoginPage: Reactor.Component {
    function render(){
        return <div .main-user role="window-caption">
                        <div .main-title role="window-caption">
                            <TitleButton/>
                            <div .icon-div>
                                <img .img-top src="pic/title.png" />
                            </div>
                        </div>
                        <div .main-main>
                            <img .img-center src="pic/body.png" />
                            <div .main-right>
                                <h1 .welcome>欢迎登录系统</h1>
                                <input .input-user #input_user value="admin" placeholder="用户名"/>
                                <input .input-user #input_pass value="abcd1234!!" placeholder="密码"/>
                                <button .main-button #user-login>登录</button>
                                <h3 .login-err >{login_err}</h3>
                            </div>
                        </div>
                    </div>;
    }
    event click $(button#user-login) {
        
       qingdao_token= handler.user_login(ruser_name,ruser_password);
       if(!qingdao_token){
        logined=false;
       }else{
        logined=true;
       }
       stdout.println(ruser_name+"  "+ruser_password+ " "+logined);
       if(logined==false){
            login_err="用户名或密码错误";
       }
        
        if(logined==true){
            handler.open_url_page();
            httpRequest(qingdaourl+"rolefunction/getauthoritymenus",#post,{categoryID: "323232", orderByField: "sequenceNo"},function(data){
                 get_touping();
                if(data.error){
                    handleAbError(data.error);
                   stdout.println(data.error);
                    return;
                }
                var t=JSON.stringify(data);
                stdout.println(t);
                var res=JSON.parse(t).data;
                page_obj=res;
                stdout.println(res.length);
                
                // var n=0;
                // for(var k in res ){
                //     if(k.title=="应用"){
                //         for (var i in k.children){
                //             page_name.push(i.title);
                //             page_num.push(n);
                //             create_url_page(n,i.page);
                //             n++;
                //         }
                //         continue;
                //     }
                //     page_name.push(k.title);
                //     page_num.push(n);
                //     n++;
                    
                // }
                
                
                // stdout.println(page_name);
                //  if(page_name[0]=="我的"){
                //     view.windowTopmost=false;
                //     menu_page=2;
                // }else if(page_name[0]=="远程控制"){
                //     view.windowTopmost=false;
                //     menu_page=0;
                // }else if(page_name[0]=="投屏"){
                //     view.windowTopmost=false;
                //     menu_page=1;
                // }else{
                //     view.windowTopmost=true;
                //     menu_page=3;
                //     visible_true_page(0);
                // }
                // last_id=0;
                // app.update();



                
                    



            },function(err,status){}, "token: "+qingdao_token);

        

    
        }


        var config = Stream.openFile(self.url("index.json"));
            if(config)
            {
                // Load the contents of the file into a json object 
                var jsonData = parseData(config);

                if(jsonData){
                    menu_json=jsonData.data;
                        var name=menu_json[0].name;
                        if(name=="mine"){
                            menu_page=2;
                        }else if(name=="remote"){
                            menu_page=0;
                        }else if(name=="reject"){
                            menu_page=1;
                        }else if(name="app"){
                            menu_page=3;
                        }else if(name="screenshot"){
                            menu_page=4;
                        }

                    app.update();

                }else{
                stdout.println("No data");
                }
                config.close();
            }
                logined=true;
                last_id=0;


        app.update();
    }


    event change $(input#input_user){
        ruser_name=$(input#input_user).value;
        login_err="";
        app.update();
    }

    event change $(input#input_pass){
        ruser_password=$(input#input_pass).value;
        login_err="";
        app.update();
    }

}
var menu_name={};
var mini_menu={};
class MiniMenu: Reactor.Component {
    function render(){

        var res=[];

        for (var key in mini_menu){
            if(mini_menu[key]==true){
                if(last_menu==key){
                    res.push(<div  .minimenu-div style="color:blue;" id={key}>{menu_name[key]}<button .minimenu-button id={key} style="color:blue;">✕</button></div>);
                }else{
                    res.push(<div  .minimenu-div id={key}>{menu_name[key]}<button .minimenu-button id={key}>✕</button></div>);
                }
                
            }
        }

        return <div .minimenu-parent >
                    {res}
                </div>;
    }
    event click $(button)(_,ele){
        
        var id=ele.id.toInteger();
        if(id==undefined){return;}
        mini_menu[id]=false;
        for(var key in mini_menu){
            if(mini_menu[key]==true){
                last_menu=key;    
                visible_true_page(key);
        
            }
        }
        
        app.update();
    }
    event click $(div)(_,ele){
        stdout.println("mini");
        
        var id=ele.id.toInteger();
        if(id==undefined){return;}
        last_menu=id;
            
        visible_true_page(id);
        
        
        
        app.update();
    }

     
}

var menu_prob={};
var menu_url={};

var new_menu=true;
var last_menu;
//多级菜单
//TODO: 解析url
class Multistage: Reactor.Component {
    this var num_id=0;
    function this(prob){
        this.obj=prob.obj;
        this.num_id=prob.num_id;
        this.layer=prob.layer;
        
    }
    function render(){
        var res=[];
        var sty;
        if(this.layer==0){
            sty="padding-left:20px;";
        }else if(this.layer==1){
            sty="padding-left:50px;";
        }else{
            sty="padding-left:70px;";
        }
        
        for(var i=1;i<=this.obj.length;i++){
            var o=this.obj[i-1];
            
            var id=this.num_id*10+i;
            menu_name[id]=o.name;
            
            if(o.children.length!=0){
                if(menu_prob[id]==undefined){
                    menu_prob[id]=false;
                    
                }
                if(menu_prob[id]==true){
                    res.push(<button .multi-button style={sty} id={id}>{o.name}◢</button>);
                    res.push(<Multistage obj={o.children} num_id={id} layer={this.layer+1}/>);}
                else{
                    res.push(<button .multi-button style={sty} id={id}>{o.name}◥</button>);
                }
            }else{
                if(last_menu==undefined){
                    last_menu=id;
                }
                if(menu_url[id]==undefined){
                    create_url_page(id,o.url.toString());
                    menu_url[id]=o.url.toString();
                }
                if(last_menu==id){
                    stdout.println(id);
                    var t=sty+"background:linear-gradient(to right, white 98%, #006afd 2%);color:#006afd;font-weight:bold;";
                    res.push(<button .multi-button  style={t} id={id}>{o.name}</button>);
                }else{
                res.push(<button .multi-button style={sty} id={id}>{o.name}</button>);
                }
            }
        }
        return <div .multi-pane>{res}</div>;
    }
    event click $(button)(_,ele){
        
        var id=ele.id.toInteger();
        if(id/10!=this.num_id){return;}
        if(menu_prob[id]==false){
            menu_prob[id]=true;
        }else{
            menu_prob[id]=false;
        }
        last_menu=id;
        
        if(menu_url[id]!=undefined && menu_prob[id]!=""){
            mini_menu[id]=true;
            
            visible_true_page(id);
        }
        
        
        app.update();
    }

}


class RemotePage: Reactor.Component {
    function render(){
        return <div .right-pane>
                    <div .right-content>
                        <div .card-connect>
                            <div .title>{translate('Control Remote Desktop')}</div>
                            <ID @{app.remote_id} />
                            <div .right-buttons>
                                <button .button .outline #file-transfer>{translate('Transfer File')}</button>
                                <button .button #connect>{translate('Connect')}</button>
                            </div>
                        </div>
                        <MultipleSessions @{app.multipleSessions} />
                    </div>
                </div>;
    }
    event click $(button#connect) {
            this.newRemote("connect");
        }
        event click $(button#file-transfer) {
            this.newRemote("file-transfer");
        }
        function newRemote(type) {
            createNewConnect(this.remote_id.value, type);
        }
}



var t_svg=<svg #button-menu t="1662349535142" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="18618" width="200" height="200"><path d="M1023.8 604.7c0 160.9-129 291.3-287.9 291.3H256.1C113.3 888.5 0.2 781.3 0.2 650.7c0-99.4 65.6-185 159.9-223.5 19.7-8 33.8-25.5 38.2-46.3C224.9 254.9 340.8 160 480 160c102.6 0 192.4 51.5 243.4 129 10 15.3 26.1 25.5 44.2 28.2 145.2 22 256.2 142.1 256.2 287.5z" p-id="18619" fill="#ffffff"></path></svg>;
var remote_svg=<svg #button-menu t="1662349629145" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="26009" width="200" height="200"><path d="M523.8 191.4v288.9h382V128.1zM523.8 833.6l382 62.2v-352h-382zM120.1 480.2H443V201.9l-322.9 53.5zM120.1 770.6L443 823.2V543.8H120.1z" p-id="26010" fill="#ffffff"></path></svg>;
var app_svg=<svg #button-menu t="1662349579209"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="24186" width="200" height="200"><path d="M490.666667 533.333333v256a64 64 0 0 1-64 64h-192a64 64 0 0 1-64-64v-192a64 64 0 0 1 64-64h256z m298.666666 0a64 64 0 0 1 64 64v192a64 64 0 0 1-64 64h-192a64 64 0 0 1-64-64V533.333333h256z m-362.666666 64h-192v192h192v-192z m362.666666 0h-192v192h192v-192zM426.666667 170.666667a64 64 0 0 1 64 64v256H234.666667a64 64 0 0 1-64-64v-192a64 64 0 0 1 64-64h192z m266.666666 0a160 160 0 1 1 0 320 160 160 0 0 1 0-320zM426.666667 234.666667h-192v192h192v-192z m266.666666 0a96 96 0 1 0 0 192 96 96 0 0 0 0-192z" p-id="24187" fill="#ffffff"></path></svg>;
var mine_svg=<svg #button-menu t="1662349104577"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="17638" width="200" height="200"><path d="M798.909987 378.24774c0-157.928892-129.560798-285.930171-289.415552-285.930171-159.851685 0-289.413506 128.001279-289.413506 285.930171 0 91.190909 43.35032 172.20913 110.62247 224.580918-120.626311 60.751642-205.53412 181.700295-214.94035 322.271868l43.287899 0c10.154267-131.637086 95.573729-248.180406 214.789924-294.523897 37.879726 17.999956 90.806145 33.604352 135.653563 33.604352s87.152942-10.346649 125.031645-28.346605l29.692253-17.228383 24.049742-15.776312C755.558643 550.45687 798.909987 469.438649 798.909987 378.24774zM754.340909 644.812865l-0.214894 0.297782c-4.724605-4.488221-11.028171-7.353478-18.08489-7.353478-14.556531 0-26.333762 5.559623-26.333762 20.094664 0 10.04682 5.814426 18.467607 14.065344 22.914896l-0.170892 0.25685C802.736129 737.585805 842.647117 823.219137 850.514295 925.100526l52.714596 0C895.661541 811.934117 839.077825 711.166085 754.340909 644.812865z" p-id="17639" fill="#ffffff"></path></svg>;
class MenuArea:Reactor.Component{
    function render(){
       var me=this;

       var rows=menu_json.map(function(row,index){
        return me.renderMenu(row,index);
       });
            return
            <div .left-menu>
            {rows}
            </div>;
    }
    function renderMenu(row,index){
        var svgl;
        var name=row.name;
        if(name=="mine"){
            svgl=mine_svg;
            name="我的";
        }else if(name=="remote"){
            svgl=remote_svg;
            name="远程连接";
        }else if(name=="reject"){
            svgl=t_svg;
            name="投屏";
        }else if(name=="app"){
            svgl=app_svg;
            name="应用";
        }else if(name=="screenshot"){
            name="截图测试";
        }
        if(index==last_id){
            return
            <div>
             <button .menu-button id={index} style="background: #2a66f3">
             {svgl}{name}
             </button>
           
             </div>;
        }
        return  <button .menu-button id={index} >
        {svgl}{name}</button>;
        
    }

    
    event click $(button)(_,ele){
        var id=(ele.id).toInteger();
        var name=menu_json[id].name;
        $(button#{last_id}).style.set{background:"transparent"};
        ele.style.set{background:"#2a66f3"};
       
        if(name=="mine"){
            view.windowTopmost=false;
            visible_false_pagee();
            menu_page=2;
        }else if(name=="remote"){
            view.windowTopmost=false;
            visible_false_pagee();
            menu_page=0;
        }else if(name=="reject"){
            view.windowTopmost=false;
            visible_false_pagee();
            menu_page=1;
        }else if(name=="app"){
            view.windowTopmost=true;
            menu_page=3;
            visible_true_pagee();
            
            last_id=id;
            app.update();
            var (mx1,my1) = $(#position1).box(#position, #border, #root);
            var (mx2,my2,mx3,my3) = $(#position2).box(#rect, #border, #root);
            send_web_position1(mx1,my1,mx3-mx2,my3-my2);
        }else if(name=="screenshot"){
            view.windowTopmost=false;
            menu_page=4;
            visible_false_pagee();

        }
        last_id=id;
        

        app.update();
        //  if(menu_page==3){
        //     is_url_page=true;
        //     if(url_page_num==0){
        //         handler.open_url_page("http://114.115.156.246:9110/#/sys/list?menu=false&head=false&tab=false");
        //         url_page_num=1;
        //     }
            
        //     handler.send_event(5,0,0,0,0);
        // }else{
        //     is_url_page=false;
        //     handler.send_event(4,0,0,0,0);
        // }
        
    }


}

//TODO: screenshot
class Screenshot: Reactor.Component {
    function render(){
        return
            <div>
                <button >screenshot</button>
            </div>;
    }
    event click $(button)(_,ele){
        stdout.println("screenshot");
        var image=view.screenBox(0,#snapshot);
        var bytes=image.toBytes();
        var path="D:/screenshot/111.png";
            bytes.save(path);
        
    }
}


function update_position(){
    self.timer(0.5s,function(){
        if($(#position1)!=undefined){
        var (mx1,my1) = $(#position1).box(#position, #border, #root);
        var (mx2,my2,mx3,my3) = $(#position2).box(#rect, #border, #root);
        send_web_position1(mx1,my1,mx3-mx2,my3-my2);
        // stdout.println(mx1+" "+my1+" "+mx2+" "+my2+" "+mx3+" "+my3);
        }
        update_position();
    });
}
update_position();
var toggle=-1;
function update_event(){
    
    self.timer(0.02s,function(){
        if(toggle==-1&&view.windowState == View.WINDOW_MINIMIZED ){
            visible_false_pagee();
            stdout.println("11");
            toggle=1;
        }else{
            if(toggle==1 &&view.windowState != View.WINDOW_MINIMIZED){
                visible_true_pagee();
                toggle=-1;
                stdout.println("00");
            }
        }
       
       
            var (x,y,w,h) = view.box(#rectw,#border,#screen);
    var (xx,yy) = view.cursorLocation();
            

            
            handler.send_event(0,x,y,w,h,"");

            // stdout.println(x+" "+y+" "+w+" "+h+" "+xx+" "+yy+" ");

            update_event();
        
    });
}
update_event();
function get_touping(){
    if(!web_page_data){
    httpRequest(qingdaourl + "sys/list", #post, {token:qingdao_token}, function(data) {
        if (data.error) {
            handleAbError(data.error);
            return;
        }
        var t =JSON.stringify(data);
        // stdout.println(t);
        var res=JSON.parse(t).data;
        
        web_page_data=res;
        app.update();


        }, function(err, status) {
        });
    }
}
function set_url_page_top(){
    self.timer(0.1s,function(){
        if(url_page_num==1){
            var (x,y)=view.cursorLocation();
        }
        set_url_page_top();
    });
}


class WebPage: Reactor.Component{
    function render(){
       if(!web_page_data){
        return;
       }
        var me=this;
        var rows=web_page_data.map(function(page,index){
            
            return me.renderRow(index);
            });
        return <div .screen-bg>
                <div .roll-bg>
                    {rows}
                </div>
                </div>;
       
    }

    function renderRow(index){
        var page=web_page_data[index];
        var id=index+1000;
        var pic_id=index+1;
        var url="background-size: 100% 100%; height: 70%; width: 100%; background-image:url(webpic/b"+pic_id+".png);";
        var lurl="background-position:center; background-size: 30%; height: 100%; width: 100%; background-image:url(webpic/l"+pic_id+".png);"; 
        var network=page.networkName;
        if(page.url==""){return;}
        stdout.println(page.url);
        if (network=="内网"){
            return 
                <div .screen-w >
                    <div  id={id} style={url} >
                    <div id={id} style={lurl}>
                    <div .web-status-red>{page.networkName}</div>
                    </div>
                    </div>
                    <div .screen-down id={id}>

                        <div .screen-title>{page.name}</div>
                    </div>
                </div>;
        }else{
            return
                <div .screen-w >
                    <div id={id} style={url}>
                    <div id={id} style={lurl}>
                        <div .web-status-blue>{page.networkName}</div>
                    </div>
                    </div>
                    <div .screen-down id={id}>

                        <div .screen-title>{page.name}</div>
                    </div>
                </div>;
        }
    }

    event click $(div)(_,ele){
        var id=(ele.id).toInteger();
        if(id>=1000){
        var url=web_page_data[id-1000].url;
        stdout.println(">>"+url+ "id");

        fullsize_page(url);}
    }
}

class TitleArea: Reactor.Component {
    function render(){
        return <div .title-pane role="window-caption">
                    <img .img-top2 src="pic/icon.png" />
                    <TitleButton/>
                </div>;
    }
}

class TitleButton:Reactor.Component{
    function render(){
        return
            <div .title-buttons>
                <button .title-buttonm #minsize>-</button>
                <button .title-buttonm #maxsize>▢</button>
                <button .title-button #close-window>✕</button>

            </div>;
    }

    event click $(button#minsize){
         view.windowState = View.WINDOW_MINIMIZED;
         app.update();
    }

    event click $(button#maxsize){
        view.windowState = View.WINDOW_MAXIMIZED;
        app.update();
    }
    
    event click $(button#close-window){
        handler.close_window();
        app.update();
    }

}

class InstallMe: Reactor.Component {
    function render() {
        return <div .install-me>
            <span />
            <div>{translate('install_tip')}</div>
            <div><button #install-me .button>{translate('Install')}</button></div>
        </div>;
    }

    event click $(#install-me) {
        handler.goto_install();
    }
}

function download(from, to, args..) {
    var rqp = { type:#get, url: from, toFile: to };
    var fn = 0;
    var on = 0;
    for( var p in args ) {
        if( p instanceof Function ) {
            switch(++fn) {
                case 1: rqp.success = p; break;
                case 2: rqp.error = p; break;
                case 3: rqp.progress = p; break;
            }
        } else if( p instanceof Object ) {
            switch(++on) {
                case 1: rqp.params = p; break;
                case 2: rqp.headers = p; break;
            }
        }  
    }
    view.request(rqp);
}


// current running version is higher than installed
class UpgradeMe: Reactor.Component {
    function render() {
        var update_or_download = is_osx ? "download" : "update";
        return <div .install-me>
            <div>{translate('Status')}</div>
            <div>{translate('Your installation is lower version.')}</div>
            <div #install-me.link>{translate('Click to upgrade')}</div>
        </div>;
    }

    event click $(#install-me) {
        handler.update_me("");
    }
}

class UpdateMe: Reactor.Component {
    function render() {
        var update_or_download = "download"; // !is_win ? "download" : "update";
        return <div .install-me>
            <div>{translate('Status')}</div>
            
            <div>There is a newer version of {handler.get_app_name()} ({handler.get_new_version()}) available.</div>
            <div #install-me.link>{translate('Click to ' + update_or_download)}</div>
            <div #download-percent style="display:hidden; padding-top: 1em;" />
        </div>;
    }

    event click $(#install-me) {
        handler.open_url("https://rustdesk.com");
        return;
        if (!is_win) {
            handler.open_url("https://rustdesk.com");
            return;
        }
        var url = software_update_url + '.' + handler.get_software_ext();
        var path = handler.get_software_store_path();
        var onsuccess = function(md5) {
            $(#download-percent).content(translate("Installing ..."));
            handler.update_me(path);
        };
        var onerror = function(err) {
            msgbox("custom-error", "Download Error", "Failed to download"); 
        };
        var onprogress = function(loaded, total) {
            if (!total) total = 5 * 1024 * 1024;
            var el = $(#download-percent);
            el.style.set{display: "block"};
            el.content("Downloading %" + (loaded * 100 / total));
        };
        stdout.println("Downloading " + url + " to " + path);
        download(
            url,
            self.url(path),
            onsuccess, onerror, onprogress);
    }
}

class SystemError: Reactor.Component {
    function render() {
        return <div .install-me>
            <div>{system_error}</div>
        </div>;
    }
}

class TrustMe: Reactor.Component {
    function render() {
        return <div .trust-me #trust-me-box>
            <div>{translate('Permissions')}</div>
            <div>{translate('config_acc')}</div>
            <div #trust-me .link>{translate('Configure')}</div>
            <div #help-me .link>{translate('Help')}</div>
        </div>;
    }

    event click $(#trust-me) {
        handler.is_process_trusted(true);
        watch_trust();
    }
    
    event click $(#help-me) {
        handler.open_url(translate("doc_mac_permission"));
    }
}

class CanScreenRecording: Reactor.Component {
    function render() {
        return <div .trust-me #screen-recording-box>
            <div>{translate('Permissions')}</div>
            <div>{translate('config_screen')}</div>
            <div #screen-recording .link>{translate('Configure')}</div>
            <div #help-me .link>{translate('Help')}</div>
        </div>;
    }

    event click $(#screen-recording) {
        handler.is_can_screen_recording(true);
        watch_screen_recording();
    }
    
    event click $(#help-me) {
        handler.open_url(translate("doc_mac_permission"));
    }
}

class InstallDaemon: Reactor.Component {
    function render() {
        return <div .install-me>
            <span />
            <div>{translate('install_daemon_tip')}</div>
            <div #install-me.link>{translate('Install')}</div>
        </div>;
    }

    event click $(#install-me) {
        handler.is_installed_daemon(true);
    }
}

class FixWayland: Reactor.Component {
    function render() {
        return <div .trust-me>
            <div>{translate('Warning')}</div>
            <div>{translate('Login screen using Wayland is not supported')}</div>
            <div #help-me .link>{translate('Help')}</div>
        </div>;
    }

    event click $(#fix-wayland) {
        handler.fix_login_wayland();
        app.update();
    }
    
    event click $(#help-me) {
        handler.open_url(translate("doc_fix_wayland"));
    }
}

class ModifyDefaultLogin: Reactor.Component {
    function render() {
        return <div .trust-me>
            <div>{translate('Warning')}</div>
            <div>{translate('Current Wayland display server is not supported')}</div>
            <div #help-me .link>{translate('Help')}</div>
        </div>;
    }

    event click $(#modify-default-login) {
        if (var r = handler.modify_default_login()) {
            // without handler, will fail, fucking stupid sciter
            handler.msgbox("custom-error", "Error", r);
        }
        app.update();
    }
    
    event click $(#help-me) {
        handler.open_url(translate("doc_fix_wayland"));
    }
}

function watch_trust() {
    // not use TrustMe::update, because it is buggy
    var trusted = handler.is_process_trusted(false);
    var el = $(div#trust-me-box);
    if (el) {
        el.style.set {
            display: trusted ? "none" : "block",
        };
    }
    if (trusted) {
        app.update();
        return;
    }
    self.timer(1s, watch_trust);
}

function watch_screen_recording() {
    var trusted = handler.is_can_screen_recording(false);
    var el = $(div#screen-recording-box);
    if (el) {
        el.style.set {
            display: trusted ? "none" : "block",
        };
    }
    if (trusted) {
        app.update();
        return;
    }
    self.timer(1s, watch_screen_recording);
}

class PasswordEyeArea : Reactor.Component {
    render() {
        var method = handler.get_option('verification-method');
        var value = method != 'use-permanent-password' ? password_cache[0] : "-";
        return
            <div .eye-area style="width: *">
                <input|text @{this.input} readonly value={value} />
                {svg_refresh_password}
            </div>;
    }

    event click $(svg#refresh-password) (_, me) {
        handler.update_temporary_password();
        this.update();
    }
}

var temporaryPasswordLengthMenu;
class TemporaryPasswordLengthMenu: Reactor.Component {
    function this() {
        temporaryPasswordLengthMenu = this;
    }

    function render() {
        if (!this.show) return <li />;
        var me = this;
        var method = handler.get_option('verification-method');
        self.timer(1ms, function() { me.toggleMenuState() });
        return <li disabled={ method == 'use-permanent-password' ? "true" : "false" }>{translate("Set temporary password length")}
            <menu #temporary-password-length>
                <li #temporary-password-length-6><span>{svg_checkmark}</span>6</li>
                <li #temporary-password-length-8><span>{svg_checkmark}</span>8</li>
                <li #temporary-password-length-10><span>{svg_checkmark}</span>10</li>
            </menu>
        </li>;
    }

    function toggleMenuState() {
        var length = handler.get_option("temporary-password-length");
        var index = ['6', '8', '10'].indexOf(length);
        if (index < 0) index = 0;
        for (var (i, el) in this.$$(menu#temporary-password-length>li)) {
            el.attributes.toggleClass("selected", i == index);
        }
    }

    event click $(menu#temporary-password-length>li) (_, me) {
        var length = me.id.substring('temporary-password-length-'.length);
        var old_length = handler.get_option('temporary-password-length');
        if (length != old_length) {
            handler.set_option('temporary-password-length', length);
            handler.update_temporary_password();
            this.toggleMenuState();
            passwordArea.update();
        }
    }
}


var passwordArea;
class PasswordArea: Reactor.Component {
    function this() {
        passwordArea = this;
    }

    function render() {
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return 
        <div .your-desktop>
            <div>{translate('Password')}</div>
            <div .password style="flow:horizontal">
                {this.renderPop()}
                <PasswordEyeArea />
                {svg_edit}
            </div>
        </div>;
    }

    function renderPop() {
        var method = handler.get_option('verification-method');
        return <popup><menu.context #edit-password-context>
            <li #use-temporary-password><span>{svg_checkmark}</span>{translate('Use temporary password')}</li>
            <li #use-permanent-password><span>{svg_checkmark}</span>{translate('Use permanent password')}</li>
            <li #use-both-passwords><span>{svg_checkmark}</span>{translate('Use both passwords')}</li>
            <div .separator />
            <li #set-password  disabled={ method == 'use-temporary-password' ? "true" : "false" }>{translate('Set permanent password')}</li>
            <TemporaryPasswordLengthMenu />
        </menu></popup>;
    }

    function toggleMenuState() {
        var id = handler.get_option('verification-method');
        if (id != 'use-temporary-password' && id != 'use-permanent-password')
            id = 'use-both-passwords';
        for (var el in [this.$(li#use-temporary-password), this.$(li#use-permanent-password), this.$(li#use-both-passwords)]) {
            el.attributes.toggleClass("selected", el.id == id);
        }
    }

    event click $(svg#edit) (_, me) {
        temporaryPasswordLengthMenu.update({show: true });
        var menu = $(menu#edit-password-context);        
        me.popup(menu);
    }

    event click $(li#set-password) {
        var me = this;
        var password = handler.permanent_password();
        var value_field = password.length == 0 ? "" : "value=" + password;
        msgbox("custom-password", translate("Set Password"), "<div .form .set-password> \
            <div><span>" + translate('Password') + ":</span><input|password(password) .outline-focus " + value_field + " /></div> \
            <div><span>" + translate('Confirmation') + ":</span><input|password(confirmation) " + value_field + " /></div> \
        </div> \
        ", function(res=null) {
            if (!res) return;
            var p0 = (res.password || "").trim();
            var p1 = (res.confirmation || "").trim();
            if (p0.length < 6) {
                return translate("Too short, at least 6 characters.");
            }
            if (p0 != p1) {
                return translate("The confirmation is not identical.");
            }
            handler.set_permanent_password(p0);
            me.update();
        });
    }

    event click $(menu#edit-password-context>li) (_, me) {
        if (me.id.indexOf('use-') == 0) {
            handler.set_option('verification-method', me.id);
            this.toggleMenuState();
            passwordArea.update();
        }
    }
}

var password_cache = ["","",""];
function updatePasswordArea() {
    self.timer(1s, function() {
        var temporary_password = handler.temporary_password();
        var verification_method = handler.get_option('verification-method');
        var temporary_password_length = handler.get_option('temporary-password-length');
        var update = false;
        if (password_cache[0] != temporary_password) {
            password_cache[0] = temporary_password;
            update = true;
        }
        if (password_cache[1] != verification_method) {
            password_cache[1] = verification_method;
            update = true;
        }
        if (password_cache[2] != temporary_password_length) {
            password_cache[2] = temporary_password_length;
            update = true;
        }
        if (update) passwordArea.update();
        updatePasswordArea();
    });                          
}
updatePasswordArea();

class ID: Reactor.Component {
    function render() {
        return <input type="text" #remote_id .outline-focus novalue={translate("Enter Remote ID")} maxlength="21"
  
        value={formatId(handler.get_remote_id())} />;
    }

    // https://github.com/c-smile/sciter-sdk/blob/master/doc/content/sciter/Event.htm
    event change {
        var fid = formatId(this.value);
        var d = this.value.length - (this.old_value || "").length;
        this.old_value = this.value;
        var start = this.xcall(#selectionStart) || 0;
        var end = this.xcall(#selectionEnd);
        if (fid == this.value || d <= 0 || start != end) {
            return;
        }
        // fix Caret position
        this.value = fid;
        var text_after_caret = this.old_value.substr(start);
        var n = fid.length - formatId(text_after_caret).length;
        this.xcall(#setSelection, n, n);
    }
}

var reg = /^\d+$/;
function formatId(id) {
    id = id.replace(/\s/g, "");
    if (reg.test(id) && id.length > 3) {
        var n = id.length;
        var a = n % 3 || 3;
        var new_id = id.substr(0, a);
        for (var i = a; i < n; i += 3) {
            new_id += " " + id.substr(i, 3);
        }
        return new_id;
    }
    return id;
}

event keydown (evt) {
    if (view.focus && view.focus.id != 'remote_id') {
        return;
    }
    if (!evt.shortcutKey) {
        if (isEnterKey(evt)) {
            var el = $(button#connect);
            view.focus = el;
            el.sendEvent("click");
            // simulate button click effect, windows does not have this issue
            el.attributes.toggleClass("active", true);
            self.timer(0.3s, function() {
                el.attributes.toggleClass("active", false);
            });
        }
    }
}

$(body).content(<div style="size:*"><App /><div #msgbox /></div>);

function self.closing() {
    var (x, y, w, h) = view.box(#rectw, #border, #screen);
    handler.closing(x, y, w, h);
    
    return true;
}

function self.ready() {
    var r = handler.get_size();
    if (isReasonableSize(r) && r[2] > 0) {
        var (sx, sy, sw, sh) = view.screenBox(#workarea, #rectw);
        if (r[2] >= sw && r[3] >= sh) {
            self.timer(1ms, function() { view.windowState = View.WINDOW_MAXIMIZED; });
        } else {
            view.move(r[0], r[1], r[2], r[3]);
        }
    } else {
        centerize(scaleIt(800), scaleIt(600));
    }
    if (!handler.get_remote_id()) {
        view.focus = $(#remote_id);
    }
    refreshCurrentUser();
    updateTheme();
}

function showAbout() {
    myIdMenu.showAbout();
}

function showSettings() {
    if ($(#overlay).style#display == 'block') return;
    myIdMenu.showSettingMenu();
}



function checkConnectStatus() {
    self.timer(1s, function() {
        var tmp = !!handler.get_option("stop-service");
        if (tmp != service_stopped) {
            service_stopped = tmp;
            app.update();
        }
        tmp = !!handler.get_option("stop-rendezvous-service");
        if (tmp != rendezvous_service_stopped) {
            rendezvous_service_stopped = tmp;
            myIdMenu.update();
        }
        tmp = handler.using_public_server();
        if (tmp != using_public_server) {
            using_public_server = tmp;
            app.connect_status.update();
        }
        tmp = handler.get_connect_status();
        if (tmp[0] != connect_status) {
            connect_status = tmp[0];
            app.connect_status.update();
        }
        if (tmp[1] != key_confirmed) {
            key_confirmed = tmp[1];
            app.update();
        }
        if (tmp[2] && tmp[2] != my_id) {
            stdout.println("id updated");
            app.update();
        }
        tmp = handler.get_error();
        if (system_error != tmp) {
            system_error = tmp;
            app.update();
        }
        tmp = handler.get_software_update_url();
        if (tmp != software_update_url) {
            software_update_url = tmp;
            app.update();
        }
        if (handler.recent_sessions_updated()) {
            stdout.println("recent sessions updated");
            updateAbPeer();
            app.update();
        }
        check_if_overlay();
        checkConnectStatus();    
    });                          
}                                
                                 
var enter = false;               
function self.onMouse(evt) {
    
    switch(evt.type) {           
    case Event.MOUSE_ENTER:    
        enter = true;
        check_if_overlay();
        break;
    case Event.MOUSE_LEAVE:
        $(#overlay).style#display = 'none';
        enter = false;
        break;
    }
}

function check_if_overlay() {
    if (!handler.get_option('allow-remote-config-modification')) {
        var time0 = getTime();
        handler.check_mouse_time();
        self.timer(120ms, function() {
            if (!enter) return;
            var d = time0 - handler.get_mouse_time();
            if (d < 120) $(#overlay).style#display = 'block';
        });
    }
}

checkConnectStatus();
view.windowState = View.WINDOW_MAXIMIZED;

function login() {

    var name0 = getUserName();
    var pass0 = '';
    msgbox("custom-login", translate('Login'), <div .form .set-password> 
            <div><span>{translate('Username')}:</span><input|text name="username" value={name0} .outline-focus /></div> 
            <div><span>{translate('Password')}:</span><PasswordComponent value={pass0} /></div> 
        </div>, function(res=null, show_progress) {
        if (!res) return;
        show_progress();
        var name = (res.username || '').trim();
        if (!name) {
            show_progress(false, translate("Username missed"));
            return " ";
        }
        var pass = (res.password || '').trim();
        if (!pass) {
            show_progress(false, translate("Password missed"));
            return " ";
        }
        abLoading = true;
        var url = handler.get_api_server();
        httpRequest(url + "/api/login", #post, {username: name, password: pass, id: my_id, uuid: handler.get_uuid()}, function(data) {
            if (data.error) {
                abLoading = false;
                var err = translate(data.error);
                show_progress(false, err);
                return;
            }
            handler.set_local_option("access_token", data.access_token);
            handler.set_local_option("user_info", JSON.stringify(data.user));
            show_progress(-1);
            myIdMenu.update();
            getAb();
        }, function(err, status) {
            abLoading = false;
            err = translate(err);
            if (url.indexOf('rustdesk') < 0) err = url + ', ' + err;
            show_progress(false, err);
        });
        return " ";
      });
}

function reset_token() {
    handler.set_local_option("access_token", "");
    handler.set_local_option("user_info", "");
    handler.set_local_option("selected-tags", "");
    myIdMenu.update();
    resetAb();
    if (abComponent) {
        abComponent.update();
    }
}

function logout() {
    var url = handler.get_api_server();
    httpRequest(url + "/api/logout", #post, {id: my_id, uuid: handler.get_uuid()}, function(data) {
    }, function(err, status) {
        msgbox("custom-error", translate('Error'), err);
    }, getHttpHeaders());
    reset_token();
}

function refreshCurrentUser() {
    if (!handler.get_local_option("access_token")) return;
    abLoading = true;
    abError = "";
    app.update();
    httpRequest(handler.get_api_server() + "/api/currentUser", #post, {id: my_id, uuid: handler.get_uuid()}, function(data) {
        if (data.error) {
            handleAbError(data.error);
            return;
        }
        handler.set_local_option("user_info", JSON.stringify(data));
        myIdMenu.update();
        getAb();
    }, function(err, status) {
        if (status == 401 || status == 400) {
            reset_token();
        }
        handleAbError(err);
    }, getHttpHeaders());
} 

function getHttpHeaders() {
    return "Authorization: Bearer " + handler.get_local_option("access_token");
}
